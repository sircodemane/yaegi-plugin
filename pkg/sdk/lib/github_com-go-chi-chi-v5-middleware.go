// Code generated by 'yaegi extract github.com/go-chi/chi/v5/middleware'. DO NOT EDIT.

package lib

import (
	"github.com/go-chi/chi/v5/middleware"
	"io"
	"net/http"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/go-chi/chi/v5/middleware/middleware"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AllowContentEncoding":  reflect.ValueOf(middleware.AllowContentEncoding),
		"AllowContentType":      reflect.ValueOf(middleware.AllowContentType),
		"BasicAuth":             reflect.ValueOf(middleware.BasicAuth),
		"CleanPath":             reflect.ValueOf(middleware.CleanPath),
		"Compress":              reflect.ValueOf(middleware.Compress),
		"ContentCharset":        reflect.ValueOf(middleware.ContentCharset),
		"DefaultLogger":         reflect.ValueOf(&middleware.DefaultLogger).Elem(),
		"GetHead":               reflect.ValueOf(middleware.GetHead),
		"GetLogEntry":           reflect.ValueOf(middleware.GetLogEntry),
		"GetReqID":              reflect.ValueOf(middleware.GetReqID),
		"Heartbeat":             reflect.ValueOf(middleware.Heartbeat),
		"IsTTY":                 reflect.ValueOf(&middleware.IsTTY).Elem(),
		"LogEntryCtxKey":        reflect.ValueOf(&middleware.LogEntryCtxKey).Elem(),
		"Logger":                reflect.ValueOf(middleware.Logger),
		"Maybe":                 reflect.ValueOf(middleware.Maybe),
		"New":                   reflect.ValueOf(middleware.New),
		"NewCompressor":         reflect.ValueOf(middleware.NewCompressor),
		"NewPattern":            reflect.ValueOf(middleware.NewPattern),
		"NewWrapResponseWriter": reflect.ValueOf(middleware.NewWrapResponseWriter),
		"NextRequestID":         reflect.ValueOf(middleware.NextRequestID),
		"NoCache":               reflect.ValueOf(middleware.NoCache),
		"PageRoute":             reflect.ValueOf(middleware.PageRoute),
		"PathRewrite":           reflect.ValueOf(middleware.PathRewrite),
		"PrintPrettyStack":      reflect.ValueOf(middleware.PrintPrettyStack),
		"Profiler":              reflect.ValueOf(middleware.Profiler),
		"RealIP":                reflect.ValueOf(middleware.RealIP),
		"Recoverer":             reflect.ValueOf(middleware.Recoverer),
		"RedirectSlashes":       reflect.ValueOf(middleware.RedirectSlashes),
		"RequestID":             reflect.ValueOf(middleware.RequestID),
		"RequestIDHeader":       reflect.ValueOf(&middleware.RequestIDHeader).Elem(),
		"RequestIDKey":          reflect.ValueOf(middleware.RequestIDKey),
		"RequestLogger":         reflect.ValueOf(middleware.RequestLogger),
		"RequestSize":           reflect.ValueOf(middleware.RequestSize),
		"RouteHeaders":          reflect.ValueOf(middleware.RouteHeaders),
		"SetHeader":             reflect.ValueOf(middleware.SetHeader),
		"StripSlashes":          reflect.ValueOf(middleware.StripSlashes),
		"Sunset":                reflect.ValueOf(middleware.Sunset),
		"SupressNotFound":       reflect.ValueOf(middleware.SupressNotFound),
		"Throttle":              reflect.ValueOf(middleware.Throttle),
		"ThrottleBacklog":       reflect.ValueOf(middleware.ThrottleBacklog),
		"ThrottleWithOpts":      reflect.ValueOf(middleware.ThrottleWithOpts),
		"Timeout":               reflect.ValueOf(middleware.Timeout),
		"URLFormat":             reflect.ValueOf(middleware.URLFormat),
		"URLFormatCtxKey":       reflect.ValueOf(&middleware.URLFormatCtxKey).Elem(),
		"WithLogEntry":          reflect.ValueOf(middleware.WithLogEntry),
		"WithValue":             reflect.ValueOf(middleware.WithValue),

		// type definitions
		"Compressor":          reflect.ValueOf((*middleware.Compressor)(nil)),
		"DefaultLogFormatter": reflect.ValueOf((*middleware.DefaultLogFormatter)(nil)),
		"EncoderFunc":         reflect.ValueOf((*middleware.EncoderFunc)(nil)),
		"HeaderRoute":         reflect.ValueOf((*middleware.HeaderRoute)(nil)),
		"HeaderRouter":        reflect.ValueOf((*middleware.HeaderRouter)(nil)),
		"LogEntry":            reflect.ValueOf((*middleware.LogEntry)(nil)),
		"LogFormatter":        reflect.ValueOf((*middleware.LogFormatter)(nil)),
		"LoggerInterface":     reflect.ValueOf((*middleware.LoggerInterface)(nil)),
		"Pattern":             reflect.ValueOf((*middleware.Pattern)(nil)),
		"ThrottleOpts":        reflect.ValueOf((*middleware.ThrottleOpts)(nil)),
		"WrapResponseWriter":  reflect.ValueOf((*middleware.WrapResponseWriter)(nil)),

		// interface wrapper definitions
		"_LogEntry":           reflect.ValueOf((*_github_com_go_chi_chi_v5_middleware_LogEntry)(nil)),
		"_LogFormatter":       reflect.ValueOf((*_github_com_go_chi_chi_v5_middleware_LogFormatter)(nil)),
		"_LoggerInterface":    reflect.ValueOf((*_github_com_go_chi_chi_v5_middleware_LoggerInterface)(nil)),
		"_WrapResponseWriter": reflect.ValueOf((*_github_com_go_chi_chi_v5_middleware_WrapResponseWriter)(nil)),
	}
}

// _github_com_go_chi_chi_v5_middleware_LogEntry is an interface wrapper for LogEntry type
type _github_com_go_chi_chi_v5_middleware_LogEntry struct {
	IValue interface{}
	WPanic func(v interface{}, stack []byte)
	WWrite func(status int, bytes int, header http.Header, elapsed time.Duration, extra interface{})
}

func (W _github_com_go_chi_chi_v5_middleware_LogEntry) Panic(v interface{}, stack []byte) {
	W.WPanic(v, stack)
}
func (W _github_com_go_chi_chi_v5_middleware_LogEntry) Write(status int, bytes int, header http.Header, elapsed time.Duration, extra interface{}) {
	W.WWrite(status, bytes, header, elapsed, extra)
}

// _github_com_go_chi_chi_v5_middleware_LogFormatter is an interface wrapper for LogFormatter type
type _github_com_go_chi_chi_v5_middleware_LogFormatter struct {
	IValue       interface{}
	WNewLogEntry func(r *http.Request) middleware.LogEntry
}

func (W _github_com_go_chi_chi_v5_middleware_LogFormatter) NewLogEntry(r *http.Request) middleware.LogEntry {
	return W.WNewLogEntry(r)
}

// _github_com_go_chi_chi_v5_middleware_LoggerInterface is an interface wrapper for LoggerInterface type
type _github_com_go_chi_chi_v5_middleware_LoggerInterface struct {
	IValue interface{}
	WPrint func(v ...interface{})
}

func (W _github_com_go_chi_chi_v5_middleware_LoggerInterface) Print(v ...interface{}) {
	W.WPrint(v...)
}

// _github_com_go_chi_chi_v5_middleware_WrapResponseWriter is an interface wrapper for WrapResponseWriter type
type _github_com_go_chi_chi_v5_middleware_WrapResponseWriter struct {
	IValue        interface{}
	WBytesWritten func() int
	WHeader       func() http.Header
	WStatus       func() int
	WTee          func(a0 io.Writer)
	WUnwrap       func() http.ResponseWriter
	WWrite        func(a0 []byte) (int, error)
	WWriteHeader  func(statusCode int)
}

func (W _github_com_go_chi_chi_v5_middleware_WrapResponseWriter) BytesWritten() int {
	return W.WBytesWritten()
}
func (W _github_com_go_chi_chi_v5_middleware_WrapResponseWriter) Header() http.Header {
	return W.WHeader()
}
func (W _github_com_go_chi_chi_v5_middleware_WrapResponseWriter) Status() int {
	return W.WStatus()
}
func (W _github_com_go_chi_chi_v5_middleware_WrapResponseWriter) Tee(a0 io.Writer) {
	W.WTee(a0)
}
func (W _github_com_go_chi_chi_v5_middleware_WrapResponseWriter) Unwrap() http.ResponseWriter {
	return W.WUnwrap()
}
func (W _github_com_go_chi_chi_v5_middleware_WrapResponseWriter) Write(a0 []byte) (int, error) {
	return W.WWrite(a0)
}
func (W _github_com_go_chi_chi_v5_middleware_WrapResponseWriter) WriteHeader(statusCode int) {
	W.WWriteHeader(statusCode)
}
